# -*- coding: utf-8 -*-
"""21.03 tasks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Ig56KElYZJDRpk2i1NN4Dpaqhcx2-gn
"""

# Зарплата сотрудника составляет salary руб.,
# ➢ Расходы на проживание не превышают зарплату и составляют expenses руб. в месяц.
# ➢ Зарплата растет каждый месяц, кроме 1 на 5% в месяц.
# ➢ Напишите скрипт расчета суммы денег, которую сотрудник накопит за ближайший год, (12
# месяцев).
# ➢ Формат вывода:
# Сотрудник накопит: ХХХ.ХХ рублей

# Мое решение

sal = float(input('Введите зарплату сотрудника:'))
exp = float(input('Введите расходы на проживание:'))
sum = 0

sal1 = sal

if sal > exp:
  for i in range(11):
    sal += sal * 0.05
    sal1 += sal
  sum = sal1-(exp*12)
  print('Накоплений за год =', round(sum, 2))
else:
    print('Накоплений не будет!')

# С лекции

salary = float(input('Введите зарплату сотрудника:'))
expenses = float(input('Введите расходы на проживание:'))
months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
tempexp = expenses
tempsal = salary

if salary <= expenses:
  print('Неправильные данные')
else:
  for i in months:
    print('Сейчас месяц', i)
    if i != 1:
      salary = salary * 1.05
      tempsal = tempsal + salary
      print('Зарплата:', round(tempsal, 2))
      tempexp = expenses * i
      print('Расходы:', tempexp)
    else:
      print('Первый месяц без %!')
      print (all_salary, expenses)
live = abs(tempsal - tempexp)
print('Сотрудник накопит:', round(live, 2), 'руб')

# Задача 2
# Дан массив чисел
# Например: [-3,2,4,0,5]
# И некая переменная K = 9
# Задача: нужно выбрать из массива парные значения которые в сумме дают К
# В нашем случае [4,5]

# Задача 2. Решение 1.

arr = [-3,2,4,0,5]
k = 9
result = []

for x in arr:
  for y in arr:
    if x+y == k:
      result.append([x,y])
print(result)

# Задача 2. Решение 2. - ОТЛАДИТЬ!!!

arr = [-3,2,4,0,5]
k = 6
result = []

low = 0
high = len(arr) - 1

while low < high:
  sum = arr[low] + arr[high]
  print(arr[low], arr[high], sum)
  if sum == k:
    result.append([arr[low], arr[high]])
  if sum != k:
    low += 1
  else:
    high -= 1
print(result)

# Бинарный поиск. ПРОВЕРИТЬ РАБОТУ

def binary_search(arr, x):
  low = 0
  high = len(arr) - 1
  index = -1
  while (low <= high) and (index == -1):
    mid = (low + high) // 2
    if arr[mid] == x:
      index = mid
    elif x < arr[mid]:
        high = mid - 1
        print('test2')
    else:
        low = mid + 1
    return index

# Экспоненциальный поиск

def exp_search(arr, x):
  if arr[0] == x:
    return 0
  index = 1
  while index < len(arr) and arr[index] <= x:
    index = index * 2
  return binary_search(arr[:min(index, len(arr))], x)

# Test

arr = [3, 4, 5, 6, 7, 8, 9]
x = int(input('Введите х: '))
print('Индекс искомого элемента:', (exp_search(arr, x)))

# Jump Search

import math
from random import randint

def jump_search(arr, value):
  length = len(arr)
  jump = int(math.sqrt(length))
  left = 0
  right = 0
  while left < length and arr[left] < value:
    right = min(length - 1, left + jump)
    if arr[left] <= value and arr[right] >= value:
      break
    left += jump
  if left >= length or arr[left] > value:
    return -1
  right = min(length - 1, right)
  i = left
  while i <= right and arr[i] <= value:
    if arr[i] == value:
      return i
    i += 1
  return -1

testarr = []
for i in range(10):
  testarr.append(randint(1, 50))
testarr.sort()
print(testarr)

value = int(input('Введите число: '))

if jump_search(testarr, value) != -1:
  print('Элемент найден под индексом:', jump_search(testarr, value))
else:
  print('Элемент отсутствует в списке!')

# Интерполяционный поиск
# index = low + [(value-arr[low])*(high-low) / (arr[high]-arr[low])]

import math
from random import randint

def interpolat_search(arr, value):
  low = 0
  high = (len(arr) - 1)
  while low <= high and value >= arr[low] and value <= arr[high]:
    index = low + int(((float(high-low) / (arr[high]-arr[low])) * (value - arr[low])))
    if arr[index] == value:
      return index
    if arr[index] < value:
      low = index + 1
    else:
      high = index - 1
  return -1

testarr = []
for i in range(10):
  testarr.append(randint(1, 50))
testarr.sort()
print(testarr)

value = int(input('Введите число: '))

if interpolat_search(testarr, value) != -1:
  print('Элемент найден под индексом:', interpolat_search(testarr, value))
else:
  print('Элемент отсутствует в списке!')

# Факториал итеративное решение

def factorial_iterative(k):
  factorial = 1
  if k < 0:
    print("Ошибка")
  else:
    for i in range(1, k + 1):
      factorial = factorial*i
    print(f"Факториал числа {k} это {factorial}")

factorial_iterative(5)

# Факториал рекурсивная функция

def factorial_recursive(k):
  if k == 1:
    return k
  else:
    print('k =', k)
    return k*factorial_recursive(k-1)

factorial_recursive(5)

# Задача 3

# Получить абсолютные пути всех файлов и папок в текущей директории.
# Написать рекурсивную функцию.
# Использовать библиотеку os

import os

def get_path(path='.'):
  for name in os.listdir(path):
    abs_path = os.path.abspath(os.path.join(path, name))

    yield abs_path

    if os.path.isdir(abs_path) is True:
      yield from get_path(abs_path)

for i in get_path('Тестовая папка'):
  print(i)

# Задача 4

# Получить абсолютные пути только файлов.
# Написать рекурсивную функцию.
# Использовать библиотеку os

import os

def get_path_file(path='.'):
  for name in os.listdir(path):
    abs_path = os.path.abspath(os.path.join(path, name))
    if os.path.isfile(abs_path) is True:
      yield abs_path
    elif os.path.isdir(abs_path) is True:
      yield from get_path_file(abs_path)

for i in get_path_file('Тестовая папка'):
  print(i)

